-- Type des valeurs renvoyées par l'évaluateur.
data Value = Vnum Int
           | Vstr String
           | Vfun (Value -> Value)
           | Vsf String SpecialForm
           | Vobj String [Value]

type VEnv = Map Var Value
type SpecialForm = VEnv -> Sexp -> Lexp

data Sexp = Snil                        -- La liste vide
          | Scons Sexp Sexp             -- Une paire
          | Ssym String                 -- Un symbole
          | Snum Int                    -- Un entier
          -- Génère automatiquement un pretty-printer et une fonction de
          -- comparaison structurelle.
          deriving (Show, Eq)

---------------------------------------------------------------------------
-- Représentation intermédiaire "Lambda"                                 --
---------------------------------------------------------------------------

type Var = String
type PrimType = String

-- Type Haskell qui décrit les types Psil.
data Ltype = Tprim PrimType
           | Tarw Ltype Ltype   -- Type "arrow" des fonctions.
           deriving (Show, Eq)


data Lelab = Lelab (Sexp -> Lexp)

data Delab = Delab (Sexp -> Ldec)


-- Lpending et Dpending sont utilisés pour implanter le "currying":
-- lorsqu'on élabore une Sexp de la forme (Scons s1 s2), si `s1`
-- n'a pas assez d'arguments, l'élaboration renvoie un `Lpending`
-- (ou `Dpending`) auquel on peut alors passer `s2`.

-- Type Haskell qui décrit les expressions Psil.
data Lexp = Lnum Int            -- Constante entière.
          | Lvar Var            -- Référence à une variable.
          | Lhastype Lexp Ltype -- Annotation de type.
          | Lapp Lexp Lexp      -- Appel de fonction, avec un argument.
          | Llet Var Lexp Lexp  -- Déclaration de variable locale.
          | Lfun Var Lexp       -- Fonction anonyme.
          | Lif Lexp Lexp Lexp  -- Expression conditionnelle.
          | Lquote Value        -- Une Sexp immédiate.
          | Lpending Lelab      -- Nœud interne utilisé pendant l'élaboration.
          deriving (Show)

-- Type Haskell qui décrit les déclarations Psil.
data Ldec = Ddec Var Ltype      -- Déclaration globale.
          | Ddef Var Lexp       -- Définition globale.
          | Dpending Delab      -- Nœud interne utilisé pendant l'élaboration.
          deriving (Show)

-- Converti une Sexp Haskell en une Sexp Psil.
h2p_sexp :: Sexp -> Value

-- Converti une Sexp Psil en une Sexp Haskell.
p2h_sexp :: Value -> Sexp

